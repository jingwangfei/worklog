1: 算法导论 --- 第二章: 插入排序
	
	问题描述:
		输入: a1, a2, a3, a4...
		输出: a1', a2', a3' 要求(a1' < a2' < a3' < ..)
	
	伪代码:
		for j=1 to A.length - 1
			key = A[j];
			// insert A[j] into sorted sequeue A[1..j-1]
			i = j-1;
			while A[i]>key and i>0
				A[i] = A[i-1];
				i --;
			A[i] = key;
			
	循环不变式证明伪代码:
		初始化: 在第一次迭代开始之前, A[0]只有一个元素, 是具有顺序
		保持:  在某次迭代开始之前, A[1..j]是有序的, 那么在下次迭代开始之前
				A[1..j+1]也是又顺的
		结束: 当到达了数组的末尾, 则带迭代结束.
	
	
	算法效率分析伪代码:
		所有的算法分析都是建立在ram计算模型之上的.
		ram计算模型: 指令一条接一条执行, 不会发生并发
		问题规模: 是指输入数据的大小
		算法效率: 是指随着输入规模的变化, 而变化的效率
		
		输入结构不同而导致了算法的效率是不同的, 这就是引发了最好情况, 最坏情况, 和平均情况
		通常我们所说的是平均情况.
		最后, 导致, 我们所说的效率是指:
			在ram计算模型之上, 算法效率随着问题规模n的变化, 通常我们需要分析平均情况下.
			
		
			for j=1 to A.length - 1							n
			key = A[j];										n - 1		
			// insert A[j] into sorted sequeue A[1..j-1]		
			i = j-1;										n - 1
			while A[i]>key and i>0							ti
				A[i] = A[i-1];								ti - 1
				i --;										ti - 1
			A[i] = key;										n - 1
			
			最后的效率是 平方函数 O(n^2)
		

2: 分页功能是如何完成的呢?
	是将查询表单, 显示列表, 以及分页表单 整合成为 一个表单
	利用了struts2的回显功能达到了带查询条件的分页
	
4: 数据库中视图


5: 	xlsx批量上传功能
		batchMemberChange()
			
	添加, 删除, 修改, 列表, 详情
		EditCommAnnouncementAction.action中又对应所有功能.
		
	定时任务
		CallOfDayService.java	
	
	ajax调用
		historyPage.jsp
		
	下载功能: 
		
6: 
		
	

	
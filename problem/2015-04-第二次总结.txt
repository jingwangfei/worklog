1: linux
	(1) 网路基本知识
		ip, 子网掩码, 默认网关, 广播地址, dns, dhcp, 外网, 内网.
		linux中有关网路的基本命令:
			ping, nslookup, traceroute, netstat

	(2) vi编辑器
		查找: /, 替换: :s/str/str1, 全局替换: :%s/str/str1

2: Java 
	(1) atomicInteger, atomicIntegerArray, AtomicIntegerFileds
		 如果共享资源是原始变量, 为了避免,线程安全的问题, 那么就会使用到atomic原子性原始类
		 
	(2) Exectors, ExecuteService, 线程池
		使用线程提高效率, 并且节约资源
		
	(3) 从内存的角度去看局部变量和全局变量
	
	(4) 创建子类对象之前必须创建父类对象, 
		创建的方式有隐士床架, 和显示创建, 
		隐士创建就是指, 自动调用父类的无参构造方法
		显示创建就是指, 使用super关键字显示调用父类中的方法
		
	(5) 属性不存在多态之说, 仅仅是方法才存在.
	
	
	(6) lock锁对象, 用来替代synchronized关键字
		lock比synchronized更加面向对象. 直接是锁门.
	
	(7) 动态代理的内部实现原理
		通过反射组装代理类的.java 文件, 然后编译, 运行
		
	(8) 读写锁, readWriteLock. 
		通常来通过readWriteLock来对get方法来进行一次优化.提高读的效率
	
	(9) conditon的作用同wait的作用是一样的.
		知不是是condition可以实现多路条件阻塞.
	
	(10) jaxb, 
		通过trang将xml转为xsd, 通过jxc将xsd转换为java 代码.
		jaxb中的核心代码

	(11) 阻塞队里, 同步队列
		用来缓冲任务
		
	(12) 线程并发集合类
		
		
3: sql语句
	重要的是思路, 也就是说给你一堆数据, 然后你随便进行操作, 
	只要最后能返回我要的结果就行.
	其中有2个核心的思想:
		(1) 连接数据的思想
			通过原始数据, 来组装成为不同的数据
			然后在对数据进行操作.
		
		(2) 子查询的思想
			将外部的一个条件, 传递个给内部进行查询
	


4: js
	(1)js中的数据类型
		js中有6种数据类型: null, undefined, string, number, boolean ,oBJect前5种是基本类型,
		最后一种是引用类型.
		null: 
			typeof null 返回object, 这是因为引用了script的错误, 
		 
		undefined:
			当一个变量为声明, 或者是没有赋值的时候, 这个变量就会返回undefined
			undefined继承自null, 因此null == undefined
		
		number:
			NaN是一种特殊的数字类型, 
			NaN与任何数字都不相等, 与自己来不相等.
			
	(2) typeof, instanceof
		typeof, 一元运算符, 用来判断一个变量的类型. 他会返回5种类型(除了null)
		instanceof, 双目运算符, 用来判断某个引用类型的具体类
					解决了typeof的短板
					
	(3) js变量的范围
		js变量作用域
			局部变量
				
			全局变量
				在函数外声明, 或者是在函数内部不进过var声明
				
		js函数作用域
			js中并没有块作用的概念, 仅仅是具有函数的作用域.
			在函数中使用的变量都是预先已经进过声明的了.
				
		js作用域链
			一层一成向上进行变量的查询. 
			
	
	(4) js中this的引用
		this是指向调用该代码的对象;
		匿名函数是属于window对象的, 全局变量也是属于window对象的.
		
		
	(5) js中的闭包
		闭包是函数外部访问函数内部局部变量的桥梁. 通常是通过返回一个嵌套的内部函数来实现.
		闭包中的变量是不会进行垃圾回收的.
	
5: 思想:
	(1) 从目前个人情况来看, 看文档的方式
		当遇到了某些比较疑惑的地方, 都会自己去看一手文档, 来进行解决.
		
	(2) 文档的编写格式
		该项目的作用, 
		该项目的总结结构
		各个体系结构详细讲解.
		
	(3) 代码流程分析
	
1: 正则表达式

	(1) 正则表达式中的捕获和非捕获
		捕获:
			如果你想获得匹配字符串中某个序列时, 就可以使用捕获组来进行获得.
		
		非捕获:
			非捕获:
				如果不想获得某个序列的值, 可以不捕获.
				也可以使用费捕获, 但是这种非捕获, 看起来是一个组, 更加好. 可以去掉一些没有用的捕获数据.
					
			非捕获肯定;
				也就是说, 匹配的时候包含 非捕获字符, 但是在获得匹配数据的时候, 不会包含 非捕获字符.
				并且不会获得 捕获数据.
				
				并且, 匹配的时候还会从 '非捕获字符开始' 进行匹配
			非捕获否定:
			非捕获反向肯定:
			非捕获反向否定: 
		
	
	
	(2) 正则表达式中的贪婪
		非贪婪:	数词后面跟上?, 表示非贪婪模式
				非贪婪模式 ---> 尽可能少的匹配
				
		贪婪模式: js中, 以及Java中默认的都采用的是贪婪模式
		
		Pattern pattern4 = Pattern.compile("^([0-9]\\d*)6\\d+?");
		String str4 = "676933$";
		Matcher matcher5 = pattern4.matcher(str4);

		if (matcher5.find()) {
			System.out.println(matcher5.group(0)); // 6769
			System.out.println(matcher5.group(1)); // 67
		}
	
	(3) Java对正则表达式的支持
		Pattern
			Pattern.compile(""); --> 讲字符串编译为模式
			pattern.matcher(""); --> 创建 字符串 和 模式之间的匹配器
			
		Matcher 
			matcher.find() ---> 查看子序列是否包含指定模式
			matcher.matches() --> 查看整个字符是否同模式匹配
			
			matcher.group(0) --> 获得匹配的数据, 根捕获没有关系
			matcher.group(...) --> 获得第几个捕获组的数据. 
								---> 如果你不仅仅是想获得某个匹配的字符串, 并且还想获得该匹配字符串中的
									某些字符序列, 就可以使用 group了.
									
		String
			String.matches(); ---> 判断字符串中是否有指定的模式.
			string.split(""); ---> 根据正则表达式进行车分
			string.replace("", "") --> 使用指定正则表达式对对自粗进行替换.
			
	
	(4) js对正则表达式的支持
		RegExp 
			test("") ---> 判断某个字符串中是否包含指定的模式.
			
		
 		String	
			js中的字符类, 同Java中的字符类一样, 对正则的支持, 都是一样的.
			match, replace, split.


2: apache的工具类
	(1) 错误的学习方式
		以方法为单位进行学习, 由于一个工具类中通常有很多的方法, 
		并且有些方法是常用的, 有些方法是不常用的. 
		不能一下都学习, 而是采用 '使用'驱动学习, 只有在使用到了之后再去看他的源码,
		再去学习.
		
	
	(2) 正确的学习方式
		以类为单位进行学习, 仅仅只需要记住类的大体作用.
		比如, 自己在操作字符串的时候, 一步并不能达成, 就要想到, StringUtils
		在比如, 操作文件的时候, 通常比较麻烦, 我么你就要相同ioUitls.
		
	

3: 




4: 



5: 



6: 





7: 